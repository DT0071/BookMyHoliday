<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="bookmyholiday_prc-test-suite.xml" />
	<munit:test name="bookmyholiday-test-suite-getFlightTest" doc:id="a38c4da5-400c-4dbf-9961-18d0973511ae" description="To test resulting payload value must not be null.">
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="587aa0b1-a52a-4c5c-a405-46897a80f4a2" >
				<munit:attributes value="#[queryParams:{flight_source:'MUM',flight_destination:'LKO'}]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to getFlight" doc:id="c4430d3a-ffa8-4070-bc28-36b456a782bd" name="getFlight"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert that" doc:id="eac928a1-bc61-43bc-b73e-08093a1849fd" expression="#[payload]" is="#[MunitTools::notNullValue()]" message="Payload should not be null. It should return invalid"/>
		</munit:validation>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-getFlightTest1" doc:id="938b4345-2f25-4244-bf10-959feee4e125" description="To mock Request component of getFlights flow.">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when" doc:id="e05fce8a-d6eb-47ff-a230-1059c22a1616" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('getflight_mock_request.json')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="ed863ddd-c0c6-427f-8eab-483b37baba8f" >
				<munit:attributes value="#[queryParams:{flight_source:'MUM',flight_destination:'LKO'}]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to getFlight" doc:id="67d57bc4-d228-41dd-bc97-f13fff6c4aa3" name="getFlight"/>
		</munit:execution>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-postFlightTest" doc:id="b5fc17f3-d0a1-4242-9359-f127980821f7" description="To mock Request component of postFlight flow.">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="7adc4227-eb89-4349-9ca8-49a671f93577" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('postflight_mock_request.json')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postFlight" doc:id="ad936c82-191a-4d45-b0c6-994c41b52d5c" name="postFlight"/>
		</munit:execution>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-getFlightTest2" doc:id="8c6cd2a8-eb29-4b6e-881e-4a4ece484eba" description="To test the Exception generated by getFlight.">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when HTTP: METHOD_NOT_ALLOWED" doc:id="6a196277-2589-41d4-a55c-11fceaed167a" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:METHOD_NOT_ALLOWED" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="c9b6b3b8-259e-4e90-9c80-fb5ea7986f30">
				<munit:attributes value="#[queryParams:{flight_source:'MUM',flight_destination:'LKO'}]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to getFlight" doc:id="cea05eef-914a-4c5c-9511-90bc825cada7" name="getFlight"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="0f90af54-1478-4762-850f-c1b0d0c4e010" actual="#[vars.code]" expected="#[12]" />
		</munit:validation>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-postFlightTest1" doc:id="19c2f752-d21c-45cd-94c2-17b2fa7fce5b" description="To test exception generated by postFlight.">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="572edf06-4a7f-499b-bbb8-a1a582632342" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[MunitTools::getResourceAsString('getflight_mock_request.json')]" />
					<munit-tools:error typeId="HTTP:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postFlight" doc:id="f67140d0-0c8f-48d4-90f9-f01365fd94d0" name="postFlight"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="eb7bcf94-a0f1-44c6-ad51-a136f1b1cff6" actual="#[vars.code]" expected="#[13]" />
		</munit:validation>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-posthotelTest1" doc:id="bed407ea-672b-4740-81ea-765c7f9d9838" description="To test final Payload should not be Null and it should be of type json">
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="5220bb8d-6bd3-429c-a0e2-54491a46308e" >
				<munit:payload value="#[MunitTools::getResourceAsString('posthotel_body.json','UTF-8')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to posthotel" doc:id="14939482-3314-486d-8cc9-e06c07231bc0" name="posthotel"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="8e8102d9-b2ca-4019-be4e-a2179c807e8f" expression="#[payload]" is="#[MunitTools::notNullValue()]"/>
			<munit-tools:assert-that doc:name="Assert that" doc:id="cd8bb3d0-3c0b-4ebc-bdd7-d33dcce007f9" expression="#[payload]" is="#[MunitTools::withMediaType('application/JSON')]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-gethotelTest" doc:id="1a14c89e-a6a9-4ed9-96db-c9d1e10308e7" description="To test Payload generated by getHotel flow should not be Null and should be of type JSON">
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="1b8fb98c-480f-498d-84d2-abbf346a5779" >
				<munit:attributes value="#[queryParams:{hotel_location:'Mumbai',hotel_checkin:'2021-11-20'}]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to gethotel" doc:id="c7cc98a4-72bd-496e-81b9-df1db745b694" name="gethotel"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="84205884-bfe1-4731-8a47-1578cb31c685" is="#[MunitTools::notNullValue()]" expression="#[payload]"/>
			<munit-tools:assert-that doc:name="Assert that" doc:id="ec87dec7-23ec-4c34-a4ee-7137f421a16d" is="#[MunitTools::withMediaType('application/JSON')]" expression="#[payload]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-starterFlowTest" doc:id="2c35df4d-4079-482a-9d42-c64f2e1a7962" description="Test">
		<munit:execution >
			<flow-ref doc:name="Flow-ref to starterFlow" doc:id="f3c40f98-f7c9-4a34-b6aa-aec49c84b0f3" name="starterFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="b809294b-95c6-4fee-bd13-ac77b0aad394" expression="#[payload.ID]" is="#[MunitTools::notNullValue()]" />
		</munit:validation>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-starterFlowTest1" doc:id="72b76a3c-6c6c-4730-96f5-3678c766ae82" description="Test">
		<munit:execution >
			<flow-ref doc:name="Flow-ref to starterFlow" doc:id="6b936152-25b8-400f-aafb-d6dc9125cbb0" name="starterFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="03924674-79d5-4f7c-9ca9-47b8e333ca3d" is="#[MunitTools::withMediaType('application/JAVA')]" expression="#[payload]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="bookmyholiday-test-suite-starterFlowTest2" doc:id="97dc1794-3576-4ae1-9f45-c10d47849433" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="ceaab080-b181-4ae5-960f-160ba4ec3091" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fileRead" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="C:\Users\divyanshstiwari\Desktop\PolInput\input.csv" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('sample.csv')]" mediaType="application/csv" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to starterFlow" doc:id="255703d3-8347-4a87-b5d9-31d541c6fb4e" name="starterFlow"/>
		</munit:execution>
	</munit:test>


</mule>
